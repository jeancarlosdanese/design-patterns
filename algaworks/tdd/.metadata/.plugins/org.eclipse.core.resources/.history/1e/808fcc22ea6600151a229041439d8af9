package com.algaworks;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.Test;

public class PedidoTest {

	private PedidoBuilder pedido;

	@Before
	public void setup() {
		pedido = new PedidoBuilder();
	}

	private void assertResumoDoPedido(double valorTotalEsperado, double descontoEsperado) {
		ResumoPedido resumoPedido = pedido.construir().resumo();
		assertEquals(valorTotalEsperado, resumoPedido.getValorTotal(), 0.0001);
		assertEquals(descontoEsperado, resumoPedido.getDesconto(), 0.0001);
	}

	@Test
	public void daveCriarPedido() throws Exception {
	}

	@Test
	public void devePermitirAdicionarUmItemNoPedido() throws Exception {
		pedido.comItem(3.0, 10);
	}

	@Test
	public void deveCalculaValotTotalEDescontoParaPedidoVazio() throws Exception {
		assertResumoDoPedido(0.0, 0.0);
	}

	@Test
	public void deveCalcularResumoParaUmItemSemDesconto() throws Exception {
		pedido.comItem(5.0, 5);
		assertResumoDoPedido(25.0, 0);
	}

	@Test
	public void deveCalcularResumoParaDoisItemSemDesconto() throws Exception {
		pedido.comItem(3.0, 3).comItem(7.0, 3);
		assertResumoDoPedido(30.0, 0);
	}

	@Test
	public void deveAplicarDescontoNa1aFaixa() throws Exception {
		pedido.comItem(20.0, 20);
		assertResumoDoPedido(400.0, 16.0);
	}

	@Test
	public void deveAplicarDescontoNa2aFaixa() throws Exception {
		pedido.comItem(15.0, 30).comItem(15.0, 30);
		assertResumoDoPedido(900.0, 54.0);
	}

	@Test
	public void deveAplicarDescontoNa3aFaixa() throws Exception {
		pedido.comItem(15.0, 30).comItem(15.0, 30).comItem(10.0, 30);
		assertResumoDoPedido(1200.0, 96.0);
	}

	@Test(expected = QuantidadeItensInvalidaException.class)
	public void naoAceitarPedidosComQuantidadeNegativa() throws Exception {
		pedido.comItem(0.0, -10);
	}

}
